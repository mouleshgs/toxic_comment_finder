# -*- coding: utf-8 -*-
"""toxic_comment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jJN1Dzj_fZJrjcqST52XxYWrKnTzsjk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

sns.set_theme()

data = pd.read_csv('./static/train.csv')


data['toxic'] = data['toxic'].apply(lambda x: 1 if x == 1 else 0)

X = data['comment_text']
y = data['toxic']

tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X_tfidf = tfidf.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

# Initialize and train the model
# Used GridSearchCV to tune the hyperparameter and found that the best param
# was C=10 and penalty='l2'.

model = LogisticRegression(C=10,max_iter=1000,random_state=42)

model.fit(X_train, y_train)


y_pred = model.predict(X_test)


print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)

sns.heatmap(cm/np.sum(cm),fmt=".2%",annot=True)

def checking(comment):
  print(comment)
  p_comment = tfidf.transform([comment])
  ans = model.predict(p_comment)
  if (ans == 0):
      return f'{comment} is non-toxic comment'
  else :
      return f'{comment} is toxic comment'

